%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2376 720
%%HiResBoundingBox: 0 0 2376 720
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2376 720 re
W
q
[0.24 0 0 -0.24 0 720] cm
q
0 0 9899.999 2999.0532 re
W*
q
[3.124468 0 0 3.125073 0 0.000288139] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
0 0 3168.5393 960.67413 re
f
Q
q
[26.329626 0 0 26.334724 197.46339 125.461815] cm
/DeviceRGB {} CS
[0.3216 0.0706 0.3843] SC
/DeviceRGB {} cs
[0.3216 0.0706 0.3843] sc
92.543999 39.919998 m
92.543999 43.038998 91.607002 45.924999 90.061996 48.423996 c
100.945999 48.423996 l
101.905998 45.753998 102.500999 42.914997 102.500999 39.919998 c
102.500999 25.203999 90.280998 13.235998 75.262001 13.235998 c
67.094002 13.235998 59.838001 16.848999 54.841003 22.450998 c
49.568005 16.848999 41.903004 13.235998 33.278004 13.235998 c
22.314003 13.235998 12.871004 19.029999 8.026003 27.428997 c
16.527004 32.477997 l
19.613005 26.991997 25.918003 23.186996 33.278004 23.186996 c
40.253002 23.186996 46.595005 25.939997 50.856003 30.590996 c
51.949001 31.783997 55.263004 35.762997 55.263004 35.762997 c
55.263004 35.762997 58.796005 31.956997 59.832005 30.590996 c
63.317005 25.977997 68.913002 23.186996 75.261002 23.186996 c
84.804001 23.188 92.543999 30.677 92.543999 39.919998 c
h
f
74.504997 56.924999 m
73.952995 54.436001 74.504997 51.674 74.504997 51.674 c
66.830994 54.558998 63.996998 66.878998 63.996998 66.878998 c
55.424999 82.916 l
51.829998 62.176003 41.726997 53.908001 37.542 48.424 c
34.318001 44.195 28.546 36.955002 29.431 39.506001 c
30.291 41.984001 29.431 45.035 29.431 45.035 c
28.047001 42.272999 18.096001 38.400002 18.096001 38.400002 c
4.825 33.422001 5.187 24.485001 5.187 24.485001 c
0.722 33.665001 2.306 43.881001 6.405 53.748001 c
11.448999 65.889999 36.373001 77.065002 42.702 80.705002 c
50.070999 84.941002 53.167 91.764 53.167 91.764 c
54.874001 91.764 l
56.057999 90.214996 l
59.653 84.681999 67.259995 79.335999 72.104996 76.876999 c
81.732994 71.984001 90.909996 61.391998 90.909996 61.391998 c
94.699997 57.433998 101.650993 52.278 101.650993 52.278 c
87.675003 47.104 74.504997 56.924999 74.504997 56.924999 c
h
27.634001 60.165001 m
19.056 55.937 13.807001 46.077 13.807001 46.077 c
13.807001 46.077 18.495001 52.808998 28.823002 58.394001 c
31.248001 59.706001 33.578003 61.462002 35.756001 63.445 c
35.855999 61.500999 35.518002 59.507999 34.918999 58.111 c
32.740997 53.047001 31.813999 49.993999 31.813999 49.993999 c
31.813999 49.993999 33.834999 53.547001 36.118 58.111 c
37.258999 60.397999 37.529999 62.903999 37.529999 65.133003 c
37.495998 65.116005 l
45.878998 73.477005 51.674999 84.541 51.674999 84.541 c
51.674999 84.541 39.701 66.114998 27.634001 60.165001 c
h
73.592003 70.566002 m
66.098999 73.487 58.029999 83.846001 58.029999 83.846001 c
58.029999 83.846001 62.048 77.557999 67.462997 73.008003 c
67.444 73.017006 l
67.557999 71.69101 67.848 70.211006 68.647003 68.909004 c
70.240005 66.309006 71.623001 64.298004 71.623001 64.298004 c
71.623001 64.298004 70.915001 66.067001 69.360001 68.972 c
68.931999 69.771004 68.627998 70.941002 68.588997 72.105003 c
69.986 71.036003 71.460999 70.109001 72.973 69.453003 c
79.406998 66.657005 82.543999 62.889004 82.543999 62.889004 c
82.543999 62.889004 78.912003 68.489998 73.592003 70.566002 c
h
f
Q
q
[26.329788 0 0 26.334883 9610.3721 263.34912] cm
/DeviceRGB {} CS
[0.3216 0.0706 0.3843] SC
/DeviceRGB {} cs
[0.3216 0.0706 0.3843] sc
-235 0 3 94 re
f
Q
q
[51.653595 0 0 51.663593 3866.2075 601.93713] cm
/DeviceRGB {} CS
[0.3216 0.0706 0.3843] SC
/DeviceRGB {} cs
[0.3216 0.0706 0.3843] sc
15.5 6 m
15.72 6 15.8 6.64 15.54 6.68 c
14.74 6.8 14.22 7.12 13.5 8.799999 c
10.12 16.66 l
9.42 18.280001 9.1 19.200001 9.1 20 c
9.1 20.120001 7.72 20.440001 7.66 20.299999 c
2.8 8.82 l
2.08 7.099999 1.54 6.8 0.76 6.679999 c
0.5 6.639999 0.56 6 0.82 6 c
6.08 6 l
6.34 6 6.380001 6.639999 6.14 6.679999 c
5.400001 6.799999 4.66 7.119999 5.360001 8.799999 c
8.740001 16.919998 l
12.120001 8.799998 l
12.840001 7.079998 12.040001 6.819998 11.120001 6.679998 c
10.860001 6.639998 10.920001 5.999999 11.180001 5.999999 c
15.500002 5.999999 l
15.5 6 l
h
17.299999 20 m
17.139999 20 17.019999 19.34 17.179998 19.32 c
18.199999 19.18 18.839998 18.779999 18.839998 17.52 c
18.839998 8.480001 l
18.839998 7.22 18.199999 6.820001 17.179998 6.68 c
17.019999 6.66 17.139997 6.000001 17.299999 6.000001 c
22.779999 6.000001 l
22.939999 6.000001 23.059999 6.66 22.9 6.68 c
22.039999 6.8 21.24 7.08 21.24 8.480001 c
21.24 17.52 l
21.24 18.92 22.039999 19.200001 22.9 19.32 c
23.059999 19.34 22.940001 20 22.779999 20 c
17.299999 20 l
h
30.379999 19.32 m
30.539999 19.34 30.42 20 30.259998 20 c
24.779999 20 l
24.619999 20 24.499998 19.34 24.659998 19.32 c
25.679998 19.18 26.319998 18.779999 26.319998 17.52 c
26.319998 8.480001 l
26.319998 7.22 25.679998 6.820001 24.659998 6.68 c
24.499998 6.66 24.619997 6.000001 24.779999 6.000001 c
30.259998 6.000001 l
30.419998 6.000001 30.539999 6.66 30.379999 6.68 c
29.519999 6.8 28.719999 7.08 28.719999 8.480001 c
28.719999 17.52 l
28.719999 18.92 29.519999 19.200001 30.379999 19.32 c
h
38.880001 19.5 m
39.040001 19.5 39 20.040001 38.880001 20.08 c
37.620003 20.5 35.84 20.360001 34.620003 19.040001 c
28.960003 12.920001 l
33.480003 8.280001 l
34.440002 7.300001 34.380005 6.860001 33.320004 6.680001 c
33.080002 6.640001 33.180004 6.000001 33.340004 6.000001 c
37.940002 6.000001 l
38.100002 6.000001 38.220001 6.660001 38.020004 6.680001 c
37.140003 6.800001 36.100006 7.200001 34.840004 8.500001 c
31.300003 12.140001 l
36.460003 17.68 l
37.760002 19.059999 38.460003 19.5 38.880005 19.5 c
38.880001 19.5 l
h
52.779999 20.32 m
49.419998 20.32 44.879997 18.360001 44.879997 13.26 c
44.879997 9.8 46.999996 5.68 52.599998 5.68 c
54.919998 5.68 56.919998 6.4 56.68 7.1 c
56.420002 7.88 l
55.700001 10.020001 54.920002 7.28 51.360001 7.28 c
48.5 7.28 47.099998 9.14 47.099998 12.020001 c
47.099998 16.52 50.519997 18.400002 53.259998 18.400002 c
53.619999 18.400002 55.439999 18.120001 56.48 17.460001 c
56.639999 17.360001 57.060001 17.820002 56.939999 18.000002 c
56.079998 19.260002 53.399998 20.320002 52.779999 20.320002 c
52.779999 20.32 l
h
73.400002 19.32 m
73.68 19.360001 73.599998 20 73.360001 20 c
68.080002 20 l
67.82 20 67.800003 19.360001 68.020004 19.32 c
68.760002 19.18 69.560005 18.92 68.820007 17.200001 c
68.600006 16.700001 l
68.400009 16.220001 68.060005 16.18 67.460007 16.18 c
63.380005 16.18 l
62.780006 16.18 62.440006 16.220001 62.240005 16.700001 c
62.040005 17.200001 l
61.340004 18.92 62.100006 19.18 63.060005 19.32 c
63.320004 19.360001 63.260006 20 63.000004 20 c
58.680004 20 l
58.440002 20 58.380005 19.360001 58.620003 19.32 c
59.440002 19.18 59.920002 18.9 60.660004 17.200001 c
64.040001 9.440001 l
64.82 7.68 65.059998 6.860001 65.059998 6.1 c
65.059998 5.980001 66.459999 5.66 66.519997 5.8 c
71.399994 17.18 l
72.119995 18.880001 72.599991 19.200001 73.399994 19.32 c
73.400002 19.32 l
h
67.32 15.06 m
67.599998 15.06 67.900002 15.020001 67.779999 14.740001 c
65.440002 9.140001 l
63.080002 14.740002 l
62.960003 15.020001 63.260002 15.060001 63.540001 15.060001 c
67.32 15.060001 l
67.32 15.06 l
h
89.580002 19.5 m
89.740005 19.5 89.700005 20.040001 89.580002 20.08 c
88.32 20.5 86.580002 20.440001 85.380005 18.9 c
82.300003 14.94 l
81.440002 13.82 80.420006 13.66 79.020004 13.639999 c
79.020004 17.52 l
79.020004 18.92 79.980003 19.16 81.260002 19.32 c
81.400002 19.34 81.300003 20 81.139999 20 c
75.080002 20 l
74.919998 20 74.800003 19.34 74.959999 19.32 c
75.979996 19.18 76.620003 18.779999 76.620003 17.52 c
76.620003 8.6 l
76.620003 7.28 75.920006 6.900001 74.959999 6.64 c
74.799995 6.6 74.900002 5.940001 75.080002 5.960001 c
75.860001 6.06 76.740005 6.08 77.380005 6.08 c
78.860008 6.08 80.240005 5.960001 81.200005 5.960001 c
84.220001 5.960001 86.240005 7.200001 86.240005 9.660001 c
86.240005 11.980001 84.360008 13.120001 82.680008 13.220001 c
82.680008 13.320002 l
83.480011 13.320002 84.060005 13.660002 84.94001 14.760002 c
87.920013 18.500002 l
88.540016 19.280003 89.140015 19.500002 89.580017 19.500002 c
89.580002 19.5 l
h
79.599998 12.72 m
82.580002 12.72 83.720001 12.200001 83.720001 10.200001 c
83.720001 8.06 82.360001 7.000001 80.580002 7.000001 c
79.400002 7.000001 79.020004 7.480001 79.020004 8.600001 c
79.020004 12.720001 l
79.600006 12.720001 l
79.599998 12.72 l
h
90.68 20.040001 m
90.480003 20.060001 90.400002 19.360001 90.559998 19.320002 c
91.720001 19.020002 92.619995 18.840002 92.619995 17.360001 c
92.619995 8.480001 l
92.619995 7.200001 91.799995 6.860001 90.939995 6.64 c
90.779991 6.6 90.879997 5.940001 91.039993 5.960001 c
92.499992 6.12 95.019997 6.08 96.23999 6.08 c
98.05999 6.08 99.37999 6.000001 101.019989 5.960001 c
101.499992 5.960001 101.499992 6.280001 101.399986 6.740001 c
100.919983 8.640001 l
100.859985 8.920001 100.359985 8.920001 100.279984 8.640001 c
99.97998 7.660001 99.379982 7.100001 96.879982 7.100001 c
95.47998 7.100001 95.019981 7.460002 95.019981 8.500001 c
95.019981 11.760001 l
95.019981 12.280001 95.279984 12.380001 95.679985 12.380001 c
96.119987 12.380001 l
97.73999 12.380001 99.139984 12.220001 99.959991 11.480001 c
100.159988 11.300001 100.599991 11.340001 100.419991 11.740002 c
99.279991 14.260002 l
99.119987 14.620002 98.819992 14.580002 98.599991 14.280003 c
98.139992 13.640002 97.119987 13.380003 95.959991 13.380003 c
95.679993 13.380003 l
95.279991 13.380003 95.019989 13.480003 95.019989 14.000003 c
95.019989 17.360003 l
95.019989 18.500002 95.499992 18.920002 97.159988 18.920002 c
100.179985 18.920002 101.37999 17.540003 101.859985 16.780003 c
101.999985 16.560003 102.539986 16.660002 102.539986 17.000002 c
102.539986 18.020002 101.679985 20.040001 100.419983 20.040001 c
99.29998 19.980001 98.199982 19.92 96.519981 19.92 c
94.679985 19.92 92.499985 19.860001 90.679977 20.040001 c
90.68 20.040001 l
h
f
Q
q
[14.483427 0 0 14.48623 3874.5039 1846.2491] cm
/DeviceRGB {} CS
[0.3216 0.0706 0.3843] SC
/DeviceRGB {} cs
[0.3216 0.0706 0.3843] sc
10.98 11.58 m
10.98 5.64 l
12.92 5.64 l
12.92 20 l
10.98 20 l
10.98 13.3 l
3.48 13.3 l
3.48 20 l
1.539999 20 l
1.539999 5.64 l
3.48 5.64 l
3.48 11.58 l
10.98 11.58 l
h
30.091999 18.280001 m
30.091999 20 l
19.491999 20 l
19.491999 5.64 l
29.952 5.64 l
29.952 7.360001 l
21.431999 7.360001 l
21.431999 11.76 l
29.292 11.76 l
29.292 13.480001 l
21.431999 13.480001 l
21.431999 18.280001 l
30.091999 18.280001 l
h
43.984001 15.82 m
38.223999 15.82 l
36.723999 20 l
34.723999 20 l
40.124001 5.64 l
42.324001 5.64 l
47.524002 20 l
45.404003 20 l
43.984001 15.82 l
h
38.824001 14.1 m
43.284 14.1 l
41.164001 7.78 l
41.124001 7.78 l
38.824001 14.1 l
h
54.576 5.64 m
54.576 18.280001 l
61.855999 18.280001 l
61.855999 20 l
52.635998 20 l
52.635998 5.64 l
54.575996 5.64 l
54.576 5.64 l
h
65.848 7.36 m
65.848 5.64 l
77.507996 5.64 l
77.507996 7.360001 l
72.647995 7.360001 l
72.647995 20 l
70.707993 20 l
70.707993 7.36 l
65.847992 7.36 l
65.848 7.36 l
h
92.099998 11.58 m
92.099998 5.64 l
94.040001 5.64 l
94.040001 20 l
92.099998 20 l
92.099998 13.3 l
84.599998 13.3 l
84.599998 20 l
82.659996 20 l
82.659996 5.64 l
84.599998 5.64 l
84.599998 11.58 l
92.099998 11.58 l
h
106.531998 14.22 m
106.531998 20 l
104.591995 20 l
104.591995 14.22 l
99.171997 5.64 l
101.431999 5.64 l
105.552002 12.540001 l
109.672005 5.640001 l
111.952003 5.640001 l
106.531998 14.22 l
h
127.916 5.64 m
127.916 18.280001 l
135.195999 18.280001 l
135.195999 20 l
125.975998 20 l
125.975998 5.64 l
127.916 5.64 l
127.916 5.64 l
h
142.667999 5.64 m
142.667999 20 l
140.727997 20 l
140.727997 5.64 l
142.667999 5.64 l
142.667999 5.64 l
h
151.460007 13.48 m
151.460007 20 l
149.520004 20 l
149.520004 5.64 l
159.460007 5.64 l
159.460007 7.360001 l
151.460007 7.360001 l
151.460007 11.76 l
158.5 11.76 l
158.5 13.480001 l
151.460007 13.480001 l
151.460007 13.48 l
h
175.672 18.280001 m
175.672 20 l
165.071991 20 l
165.071991 5.64 l
175.532 5.64 l
175.532 7.360001 l
167.011993 7.360001 l
167.011993 11.76 l
174.87199 11.76 l
174.87199 13.480001 l
167.011993 13.480001 l
167.011993 18.280001 l
175.672 18.280001 l
h
198.336 8.1 m
195.01599 20 l
192.976 20 l
189.23599 5.64 l
191.336 5.64 l
194.01599 17.32 l
194.05598 17.32 l
197.27599 5.639999 l
199.39598 5.639999 l
202.61598 17.32 l
202.65598 17.32 l
205.33597 5.639999 l
207.47597 5.639999 l
203.69597 20 l
201.65598 20 l
198.37598 8.1 l
198.33598 8.1 l
198.336 8.1 l
h
214.888 5.64 m
214.888 20 l
212.948 20 l
212.948 5.64 l
214.888 5.64 l
214.888 5.64 l
h
220.3 7.36 m
220.3 5.64 l
231.96001 5.64 l
231.96001 7.360001 l
227.10001 7.360001 l
227.10001 20 l
225.16 20 l
225.16 7.36 l
220.3 7.36 l
220.3 7.36 l
h
246.552 11.58 m
246.552 5.64 l
248.492 5.64 l
248.492 20 l
246.552 20 l
246.552 13.3 l
239.052 13.3 l
239.052 20 l
237.112 20 l
237.112 5.64 l
239.052 5.64 l
239.052 11.58 l
246.552 11.58 l
h
273.17599 5.64 m
275.116 5.64 l
275.116 14.959999 l
275.116 17.9 273.276 20.379999 269.336 20.379999 c
265.47601 20.379999 263.81601 17.9 263.81601 15.219999 c
263.81601 5.639999 l
265.75601 5.639999 l
265.75601 14.679999 l
265.75601 17.799999 267.65601 18.66 269.39603 18.66 c
271.17603 18.66 273.17603 17.84 273.17603 14.719999 c
273.17603 5.639999 l
273.17599 5.64 l
h
292.008 9.84 m
290.18799 9.84 l
290.08798 7.62 288.24799 6.92 286.62799 6.92 c
285.40799 6.92 283.34799 7.26 283.34799 9.440001 c
283.34799 10.660001 284.20798 11.06 285.048 11.26 c
289.14801 12.200001 l
291.008 12.64 292.40802 13.76 292.40802 16.040001 c
292.40802 19.440001 289.24802 20.380001 286.78802 20.380001 c
284.12802 20.380001 283.08801 19.580002 282.44803 19.000002 c
281.22803 17.900002 280.98804 16.700003 280.98804 15.360002 c
282.80804 15.360002 l
282.80804 17.960001 284.92804 18.720001 286.76804 18.720001 c
288.16803 18.720001 290.52805 18.360001 290.52805 16.300001 c
290.52805 14.800001 289.82803 14.320002 287.46805 13.760001 c
284.52805 13.080001 l
283.58804 12.860001 281.46805 12.200001 281.46805 9.700001 c
281.46805 7.460001 282.92804 5.260001 286.40805 5.260001 c
291.42804 5.260001 291.92804 8.26 292.00806 9.84 c
292.008 9.84 l
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
